name: Publish Docker image for dev
on:
  push:
    branches: [ 'development', 'info_endpoint_tests' ]

env:
  VERSION: v4-nightly

jobs:
  run_the_tests:
    env:
      # Secrets
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

      # Env variables
      CELERY_BROKER_URL: $CELERY_BROKER_URL
      CSRF_TRUSTED_ORIGIN: $CSRF_TRUSTED_ORIGIN
      DEBUG: $DEBUG
      LL_URL: $LL_URL
      SNAPI_VERSION: $SNAPI_VERSION

    name: Run the tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Check Docker Compose config
        run: docker compose -f docker-compose.dev.yml config

#      - name: Run the compose file
#        run: docker compose -f docker-compose.dev.yml up -d
#
#      - name: Run the tests
#        run: docker compose -f docker-compose.dev.yml exec app python manage.py test


  push_to_registry:
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    needs: run_the_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/spaceflightnewsapi/spaceflightnewsapi
          tags: |
            type=raw,value=${{ env.VERSION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            RELEASE_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
