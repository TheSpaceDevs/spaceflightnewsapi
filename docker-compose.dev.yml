version: "3.8"

volumes:
  database:
  rabbitmq:

services:
  database:
    image: postgres:15-alpine
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"

  app:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./api:/code/api
      - ./snapy:/code/snapy
      - ./htmlcov:/code/htmlcov
      - ./manage.py:/code/manage.py
    ports:
      - "8000:8000"
    environment:
      - SNAPI_VERSION=${SNAPI_VERSION}
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - LL_URL=${LL_URL}
      - LL_TOKEN=${LL_TOKEN}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CSRF_TRUSTED_ORIGIN=${CSRF_TRUSTED_ORIGIN}
    depends_on:
      database:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq:/var/lib/rabbitmq/

  beat:
    build: .
    command: celery -A snapy beat -l INFO
    volumes:
      - ./api:/code/api
      - ./snapy:/code/snapy
      - ./manage.py:/code/manage.py
    environment:
      - SNAPI_VERSION=${SNAPI_VERSION}
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CSRF_TRUSTED_ORIGIN=${CSRF_TRUSTED_ORIGIN}
    depends_on:
      rabbitmq:
        condition: service_started
      database:
          condition: service_healthy

  worker:
    build: .
    command: celery -A snapy worker -l INFO
    volumes:
      - ./api:/code/api
      - ./snapy:/code/snapy
      - ./manage.py:/code/manage.py
    environment:
      - SNAPI_VERSION=${SNAPI_VERSION}
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - LL_URL=${LL_URL}
      - LL_TOKEN=${LL_TOKEN}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CSRF_TRUSTED_ORIGIN=${CSRF_TRUSTED_ORIGIN}
    depends_on:
      rabbitmq:
        condition: service_started
      database:
        condition: service_healthy
